# RPM Package Builder
This repository helps you create RPM packages to share with other developers

## Prerequisites

Before you begin, ensure you have the following installed on your system:
-rpmdevtools
- ...

when running the script is completed! you will get "rpmbuild" folder which contain rpms tree
rpmbuild/
├── BUILD   # When packages are built, various %buildroot directories are created here. 
            # This is useful for investigating a failed build if the logs output do not provide enough information.

├── RPMS    # Binary RPMs are created here, in subdirectories for different architectures, you can set it to noarch or inherit from the system ( x86_64,arm64)
├── SOURCES # Here, the packager puts compressed source code archives and patches. The rpmbuild command looks for them here.
├── SPECS   # The packager puts SPEC files here. The spec look like recipe in Yocto project
└── SRPMS   # When rpmbuild is used to build an SRPM instead of a binary RPM, the resulting SRPM is created here.

### Building Software from Source
1. building a source RPM
2. building a binary RPM


**step 1**: prepare the source code and then put them in tarball under form: <name>-<version>.tar.gz 

$ mv <name>-<version>.tar.gz  rpmbuild/SOURCES

**step 2**: create the spec file

$ cd rpmbuild/SPECS

$ rpmdev-newspec <spec-name>   

<spec-name>.spec created; type minimal, rpm version >= 4.16.

======================================================================================================================================
                                                         SPEC FILE STRUCTURE      
======================================================================================================================================                                     This is basic structure.                                                                 
-----------------
Metadata section:
-----------------
Name:           Package's name, which should match the SPEC filename.
Version:        The upstream version number of the software
Release:        The number of times this version of the software was released.
Summary:        A brief, one-line summary of the package
License:        The license of the software being packaged
URL:            This is the upstream project website for the software being packaged.
Source0:        Path URL to the compressed archive of the upstream source code (unpatched, patches are handled elsewhere)
BuildRequires:  Packages required for building the program written in a compiled language
Requires:       Packages required by the software to run once installed.
BuildArch:      Point out the pakage dependent in the architecture
ExcludeArch:    If a piece of software can not operate on a specific processor architecture, you can exclude that architecture here.
---------------
Script section:
---------------
< %description >  A full description of the software packaged in the RPM. This description can span multiple lines and can be broken into paragraphs.

< %prep >         Command or series of commands to prepare the software to be built, for example, unpacking the archive in Source0. This directive can contain a shell script.

< %build >        Command or series of commands for actually building the software into machine code (for compiled languages) or byte code (for some interpreted languages).

< %install >      Command or series of commands for copying the desired build artifacts from the %builddir (where the build happens) to the %buildroot directory 
                 (which contains the directory structure with the files to be packaged) 
< %check >        Command or series of commands for testing the software eg. unit test ,integation test,...
 
< %file >         The list of files that will be installed in the end user’s system

< %changelog >      A record of changes that have happened to the package between different Version or Release builds.
------------------------
Advanced items section:
------------------------

The specfile can contains other advanced items. we will discuss them later


In additon, you can use the macro in the spec file

======================================================================================================================================

Macro	             Default Value	        Description	
%_prefix	        /usr	                The base installation prefix	
%_exec_prefix	    %{_prefix}	            Installation prefix for executables	
%_bindir	        %{_exec_prefix}/bin	    Directory for executable programs	
%_sbindir	        %{_exec_prefix}/sbin	Directory for system administration programs	
%_libexecdir	    %{_exec_prefix}/libexec	Directory for helper programs for executables	
%_datadir	        %{_prefix}/share	    Directory for application data files	
%_sysconfdir	    /etc	                Directory for system configuration files	
%_sharedstatedir	%{_prefix}/com	        Directory for shared state data	
%_localstatedir	    %{_prefix}/var	        Directory for mutable, local state data	
%_libdir	        %{_exec_prefix}/lib	    Directory for libraries	
%_includedir	    %{_prefix}/include	    Directory for header files	
%_oldincludedir	    /usr/include	        (deprecated) Historical location of header files	
%_infodir	        %{_datadir}/info	    Directory for GNU info documentation	
%_mandir	        %{_datadir}/man	        Directory for manual pages	

======================================================================================
Spec file for Bash script

hello.spec
--------------------------------------------------------
Name:       hello
Version:    1
Release:    1
Summary:    Most simple RPM package
License:    FIXME
BuildArch:  noarch


%description
This is my first RPM package, which does nothing.

%prep
# we have no source, so nothing here

%build
cat > hello.sh <<EOF
#!/usr/bin/bash
echo "Hello \$1"
EOF

%install
mkdir -p %{buildroot}/usr/bin/
install -m 755 hello.sh %{buildroot}/usr/bin/hello

%files
/usr/bin/hello

%changelog
# let's skip this for now
-----------------------------------------------------
Put the script in rpmbuild/SPECS/hello.spec

$ cd rpmbuild/SPECS/

$ rpmbuild -bb hello.spec

Check the newly built rpms in rpmbuild/RPMS/<arch>/hello-1-1.<arch>.rpms

=====================================================================================

Build rpms for a python program

1. Prepare the source
quiz-game-0.1
├── LICENSE
└── quiz-game.py

2. Create  the tarball from the source and then put it in rpmbuild/SOURCE

$ tar quiz-game-0.1.tar.gz quiz-game-0.1/
 
$ mv quiz-game-0.1.tar.gz rpmbuild/SOURCES

3. Create spec file using rpmdevtools

$ cd rpmbuild/SPECS

$ rpmdev-newspec quiz-game 

After that adjust the specfile to build the package

For example:
-------------------------------------------------------------------
Name:           quiz-game
Version:        0.1
Release:        1%{?dist}
Summary:        quiz-game example implemented in python
License:        GPLv3+
Source0:        %{name}-%{version}.tar.gz
BuildRequires:  python3
Requires:       python3 bash
BuildArch:      noarch


%description
The long-tail description for our Quiz Game Example implemented in
Python.
%prep
%setup -q

%install
mkdir -p %{buildroot}%{_bindir}
mkdir -p %{buildroot}/usr/lib/%{name}

cat > %{buildroot}%{_bindir}/%{name} <<-EOF

#!/bin/bash
/usr/bin/python3 /usr/lib/%{name}/%{name}.py
EOF

chmod 0755 %{buildroot}%{_bindir}/%{name}
install -m 0644 %{name}.py %{buildroot}/usr/lib/%{name}/

%files
%license LICENSE
%dir /usr/lib/%{name}/
%{_bindir}/%{name}
/usr/lib/%{name}/%{name}.py

%changelog
  - First quiz game package
----------------------------------------------------------------------


4. Build the packges

$ pwd
rpmbuild/SPECS

$ rpmbuild -bb quiz-game.spec

5. Check the output

The newly built package was put in rpmbuild/RPMS/noarch/quiz-game-0.1-1.el9.noarch.rpm

You can check it using these command :

$ dnf install rpmbuild/RPMS/noarch/quiz-game-0.1-1.el9.noarch.rpm

$ which quiz-game

$ quiz-game

=====================================================================================
Build package for a C program

1. Prepare the source
sysinfo-0.1
├── LICENSE
├── makefile
└── sysinfo.c

2. Create  the tarball from the source and then put it in rpmbuild/SOURCE

$ tar sysinfo-0.1.tar.gz sysinfo-0.1/
 
$ mv sysinfo-0.1.tar.gz rpmbuild/SOURCES

3. Create spec file using rpmdevtools

$ cd rpmbuild/SPECS

$ rpmdev-newspec sysinfo 

After that adjust the specfile to build the package

For example:
------------------------------------------------------------
Name:       sysinfo
Version:    0.1
Release:    1%{?dist}
Summary:    Get system information example implemented in C
License:    GPLv3+
Source0:    %{name}-%{version}.tar.gz

BuildRequires: gcc
BuildRequires: make

%description
The long-tail description for our getting system information  Example implemented in
C.
%prep
%setup -q

%build
make %{?_smp_mflags}
%install
%make_install
%files
%license LICENSE
%{_bindir}/%{name}
%changelog
- First getting system information package
-------------------------------------------------------------

4. Build the packges

$ pwd
rpmbuild/SPECS

$ rpmbuild -bb sysinfo.spec

5. Check the output

The newly built package was put in rpmbuild/RPMS/x86_64/sysinfo-0.1-1.el9.noarch.rpm



